#!/usr/bin/env python3
"""
Test script to verify Streamlit preview mode integration
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.workflow_manager import WorkflowManager
import logging

# Set up logging to see what happens
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_streamlit_preview_integration():
    """Test that the Streamlit preview mode calls the correct methods"""
    
    print("üß™ Testing Streamlit Preview Mode Integration")
    print("=" * 60)
    
    try:
        # Initialize workflow manager (same as Streamlit does)
        workflow = WorkflowManager()
        
        print("\n1Ô∏è‚É£ Testing workflow.run_preview_mode() method exists...")
        if hasattr(workflow, 'run_preview_mode'):
            print("‚úÖ run_preview_mode method exists")
        else:
            print("‚ùå run_preview_mode method missing!")
            return False
        
        print("\n2Ô∏è‚É£ Testing workflow.get_employees_needing_real_alerts() method exists...")
        if hasattr(workflow, 'get_employees_needing_real_alerts'):
            print("‚úÖ get_employees_needing_real_alerts method exists")
        else:
            print("‚ùå get_employees_needing_real_alerts method missing!")
            return False
        
        print("\n3Ô∏è‚É£ Testing that run_preview_mode() doesn't send emails...")
        print("This will run the actual preview mode - watch for 'PREVIEW MODE' messages:")
        print("-" * 40)
        
        # This should NOT send emails
        workflow.run_preview_mode()
        
        print("-" * 40)
        print("‚úÖ Preview mode completed - check logs above for 'PREVIEW MODE' indicators")
        
        print("\n4Ô∏è‚É£ Testing get_employees_needing_real_alerts() for display...")
        employees_needing_alerts = workflow.get_employees_needing_real_alerts()
        print(f"‚úÖ Found {len(employees_needing_alerts)} employees who would need alerts")
        
        if employees_needing_alerts:
            print("\nüìã Sample employees who would receive alerts:")
            for i, emp_data in enumerate(employees_needing_alerts[:3]):  # Show first 3
                employee = emp_data['employee']
                shortfall = emp_data['shortfall']
                print(f"  {i+1}. {employee['name']} - Shortfall: {shortfall:.1f}h")
        
        print("\n" + "=" * 60)
        print("üéØ STREAMLIT INTEGRATION TEST RESULTS:")
        print("‚úÖ All required methods exist")
        print("‚úÖ Preview mode runs without sending emails")
        print("‚úÖ Employee data can be retrieved for display")
        print("‚úÖ Streamlit preview mode should work correctly!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error during test: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def simulate_streamlit_preview_flow():
    """Simulate exactly what happens when user clicks preview in Streamlit"""
    
    print("\n" + "=" * 60)
    print("üé≠ SIMULATING STREAMLIT PREVIEW FLOW")
    print("=" * 60)
    
    try:
        # This is exactly what the updated Streamlit code does
        workflow = WorkflowManager()
        
        print("üîç **PREVIEW MODE** - No emails will be sent!")
        print("üîç Running preview mode analysis...")
        
        # Step 1: Run the actual preview mode (NO EMAILS SENT)
        workflow.run_preview_mode()
        
        # Step 2: Get detailed data for display
        employees_needing_alerts = workflow.get_employees_needing_real_alerts()
        
        if not employees_needing_alerts:
            print("‚úÖ No employees need alerts for the previous work week!")
        else:
            print(f"‚ö†Ô∏è {len(employees_needing_alerts)} employees would receive alerts (but NO emails sent in preview mode)")
            
            # Show what Streamlit would display
            for i, emp_data in enumerate(employees_needing_alerts[:2]):  # Show first 2
                employee = emp_data['employee']
                weekly_data = emp_data['weekly_data']
                shortfall = emp_data['shortfall']
                
                print(f"\nüë§ {employee['name']} - Shortfall: {shortfall:.1f}h")
                print(f"   üìß Email: {employee['email']}")
                print(f"   ‚è∞ Hours worked: {weekly_data['total_hours']:.1f}h")
                print(f"   üìâ Shortfall: {shortfall:.1f}h")
        
        print("\nüîç **PREVIEW MODE COMPLETE** - No emails were sent!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error in simulation: {str(e)}")
        return False

if __name__ == "__main__":
    success1 = test_streamlit_preview_integration()
    success2 = simulate_streamlit_preview_flow()
    
    print("\n" + "=" * 60)
    print("üèÅ FINAL RESULT:")
    if success1 and success2:
        print("‚úÖ Streamlit preview mode integration is working correctly!")
        print("‚úÖ When you click 'Preview Mode' in Streamlit, NO emails will be sent!")
    else:
        print("‚ùå There are issues with the integration")
    print("=" * 60)
